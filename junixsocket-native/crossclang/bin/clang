#!/usr/bin/env bash
#
# crossclang
# A helper script to simplify cross-compilation
#
# Copyright 2019 Christian KohlschÃ¼tter
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# if you don't specify a -target, or specify -target current, we infer the name of the current target,
#     and look up for our configuration
# if you specify -target default, the default clang compiler will be used 
# if you specify -target and some other value, we check the available targets in target-sdks
#     and add custom options to clang to simplify cross-compilation
# if you specify an invalid value to -target, the set of available targets is shown as an error message

currentDir=$(cd "$(dirname $0)"; pwd)
clangDir=$(cd "$(dirname $(which clang))"; pwd)
findOtherClang=0
if [ "$currentDir" == "$clangDir" ]; then
    # looks like we're in the PATH
    findOtherClang=1
fi

if [[ -z "$(which llvm-ar)" || $findOtherClang -gt 0 ]]; then
  # let's add the latest LLVM to the path
  latestLLVM=$(for f in /usr/local/Cellar/llvm/*/bin; do echo $f; done | sort -r -n | head -n 1)
  if [[ -n "$latestLLVM" && -d "$latestLLVM" ]]; then
      export PATH="$latestLLVM:$PATH"
  fi
fi

clangDir=$(cd "$(dirname $(which clang))"; pwd)
if [ "$currentDir" == "$clangDir" ]; then
    export PATH="/usr/bin:/usr/local/bin:$PATH"
    clangDir=$(cd "$(dirname $(which clang))"; pwd)
    if [ "$currentDir" == "$clangDir" ]; then
        echo "crossclang detected in PATH. Can't find real clang, giving up" >&2
        exit 1
    fi
fi

clangArgs=()
libsArgs=()
target=""
sdkroot=
sdkroot_base=""

needLinker=1
isShared=0
nostdlib=0

hasShared=0
defaultFallback=0
looksLikeCPP=0

# parse arguments
previous=""

hasArgs=$#
hasFiles=0
withAndWithoutLC=0
hasO=0
outputFile=
useLdShim=0
gccMode=0
compiler=clang
outputStripLibPrefix=0

while [ $# -gt 0 ]; do
  v="$1"
  shift
  
  skipArg=0

  case "$previous" in
      -isdkroot ) sdkroot="$v" ;;
  esac
  
  case "$v" in 
      -E ) needLinker=0 ;;
      -fsyntax-only ) needLinker=0 ;;
      -c ) needLinker=0 ;;
      -S ) needLinker=0 ;;
      -bundle ) isShared=1 ;;
      -dynamic ) isShared=1 ;;
      -dynamiclib ) isShared=1 ;;
      -shared ) isShared=1; hasShared=1 ;;
      -nostdlib ) nostdlib=1 ;;
      -Xcrossclang-with-and-without-lc ) withAndWithoutLC=1; skipArg=1 ;;
      -Xcrossclang-use-ldshim ) useLdShim=1 ; skipArg=1 ;;
      -Xcrossclang-use-gcc=* ) gccMode=1 ; compiler="${v#-Xcrossclang-use-gcc=}" ; skipArg=1 ;;
      -Xcrossclang-output-strip-lib-prefix ) outputStripLibPrefix=1 ; skipArg=1 ;;
      -o ) hasO=1; skipArg=1 ;;
      *.cc ) looksLikeCPP=1 ;;
      *.cpp ) looksLikeCPP=1 ;;
      *.cxx ) looksLikeCPP=1 ;;
      *.c++ ) looksLikeCPP=1 ;;
      *.hh ) looksLikeCPP=1 ;;
      *.hpp ) looksLikeCPP=1 ;;
      *.mm ) looksLikeCPP=1 ;;
      -l* ) libsArgs+=("$v") ; skipArg=1 ;; # for compatibility, libs will be added last
      -target ) v="$1"; target="$v"; shift; skipArg=1 ;;
      c++ ) if [ "$previous" == "-x" ]; then looksLikeCPP=1; fi ;;
      - ) hasFiles=1 ;;
  esac
  
  if [[ $hasFiles -eq 0 && -n "$v" && "${v:0:1}" != "-" && -e "$v" ]]; then
      hasFiles=1
  fi
  
  if [[ "$previous" == "-o" ]]; then
      outputFile="$v"
      skipArg=1
  fi

  if [[ "$skipArg" -eq 0 ]]; then
      clangArgs+=("$v")
  fi

  previous="$v"
done

output_args=()
clangLinkerArgs=()
isystem_decls=()

if [ $hasO -gt 0 ]; then
    if [[ $outputStripLibPrefix -eq 1 ]]; then
        outputFile="${outputFile#lib}"
    fi
    output_args+=("-o" "$outputFile")
fi

if [ $hasFiles -eq 0 ]; then
    needLinker=0
fi

if [ "$target" == "default" ]; then
    defaultFallback=1
    target=""
elif [ "$target" == "current" ]; then
    target=
elif [[ -z "$target" && $gccMode -eq 1 ]]; then
    target=unspecified
fi

if [[ "$target" != "unspecified" ]]; then
    currentTarget=
    if [[ -z "$target" ]]; then
        if [ $defaultFallback -gt 0 ]; then
            PATH=/usr/bin:$PATH
        fi
    
        target=$($(which $compiler) --version | grep "^Target: " | head -n 1)
        target=${target##* }
        if [ -z "$target" ]; then
            echo "Could not determine target" >&2
            exit 1
        fi
        currentTarget="$target"
    
        if [ $defaultFallback -gt 0 ]; then
            exec clang ${output_args[@]} ${clangArgs[@]}
        fi
    fi
    
    sdkroot_bases=()
    if [ -n "$sdkroot_base" ]; then
        sdkroot_bases+=("$sdkroot_base")
    fi
    sdkroot_bases+=(
        "$(dirname $0)/../target-sdks"
        "$HOME/.crossclang/target-sdks"
        "/opt/crossclang/target-sdks"
    )
        
    if [[ "$target" == "/"* ]]; then
        sdkroot="$target"
    else
        for base in ${sdkroot_bases[@]}; do
            if [[ -n "$base" && -f "$base/$target/target.conf" ]]; then
                sdkroot_base="$base"
                break
            fi
        done
    fi 
    
    if [ -z "$sdkroot" ]; then
        if [[ -n "$sdkroot_base" && -n "$target" ]]; then
            sdkroot="$sdkroot_base/$target"
            
            sdkrootFiles=$(ls "$sdkroot" | grep -v target)
            if [[ -z "$sdkrootFiles" ]]; then
                echo "Warning: crossclang has an incomplete configuration for target \"$target\" -- you need to run sync-target-sdk first!" >&2
            fi
        elif [[ "$defaultFallback" -eq 0 ]]; then
            echo "Error: crossclang not yet configured for target \"$target\" -- you need to run prepare-target-sdk first!" >&2
        fi
    fi
    
    sdkrootOrig="$sdkroot"
    sdkroot=$(cd "$sdkroot" 2>/dev/null && pwd)
    targetConf="$sdkroot/target.conf"
    
    target_include_path=()
    target_library_path=()
    target_framework_path=()
    
    if [[ $? -ne 0 || -z "$sdkrootOrig" || ! -f "$targetConf" ]]; then
        if [[ "$target" != "$currentTarget" ]]; then
            echo "Could not find SDK root for target: $target" >&2
            echo "Available targets:$(for f in $(find "${sdkroot_bases[@]}" -mindepth 1 -maxdepth 1 2>/dev/null); do if [ -f "$f/target.conf" ]; then echo -n $'\n'"- $(basename $f)"; fi done)" >&2
            echo "- current (use current target)" >&2
            echo "- default (use default clang)" >&2
            exit 1
        fi
        
        # build for current architecture
        sdkroot=
        target_triple="$target"
        target_linker=ld
        if [ -n "$(ld -help 2>/dev/null| grep ld64)" ]; then
            target_linker=ld64
        fi
    else
        target=$(cd "$sdkroot"; basename "$(pwd)" )
        sdkroot=$(cd "$sdkroot"; pwd )
        source "$targetConf"
    fi
    
    triple="$target"
    if [ -n "$target_triple" ]; then
        triple="$target_triple"
        if [[ $gccMode -eq 1 ]]; then
            # do not add -target
            true
        else
            clangArgs+=("-target" "$target_triple")
        fi
    fi
    
    if [ -n "$sdkroot" ]; then
        isystem_decls+=("--sysroot" "$sdkroot")
        isystem_decls+=("-isysroot" "$sdkroot")
    fi
    
    for include in ${target_include_cpp_path[@]}; do
        if [[ $gccMode -eq 1 ]]; then
            isystem_decls+=("-isystem" "$sdkroot/$include")
        else
            isystem_decls+=("-cxx-isystem" "$sdkroot/$include")
            if [ $looksLikeCPP -gt 0 ]; then
                # NOTE: working around an issue where -cxx-isystem is ignored
                isystem_decls+=("-isystem" "$sdkroot/$include")
            fi
        fi
    done
    for include in ${target_include_path[@]}; do
        isystem_decls+=("-isystem" "$sdkroot/$include")
    done
    
    for path in ${target_framework_path[@]}; do
        isystem_decls+=("-iframeworkwithsysroot" "$path")
    done
    
    if [ -f "$sdkroot/target.h" ]; then
        isystem_decls+=("-imacros" "$sdkroot/target.h")
    fi
    
    if [ $hasFiles -eq 0 ]; then
        isystem_decls=()
    fi

fi

if [ $hasArgs -eq 0 ]; then
    needLinker=0
fi

if [ $needLinker -gt 0 ]; then
    ldPath=""
    
    if [ -z "$target_linker" ]; then
        target_linker=ld
    fi
    
    case "$target_linker" in
        ld)
        ldPath=$(which ld.lld)
        if [ $nostdlib -gt 0 ]; then
            clangLinkerArgs+=("-fPIC")
        fi

        if [ $isShared -gt 0 ]; then
            if [[ $hasShared -eq 0 ]]; then
                clangLinkerArgs+=("-shared")
            fi
        fi
        
        if [ -n "$sdkroot" ]; then
            clangLinkerArgs+=("-Wl,--sysroot=$sdkroot")
            for path in ${target_library_path[@]}; do
                if [ -d "$sdkroot/$path" ]; then
                    clangLinkerArgs+=("-Wl,-L$sdkroot/$path")
                fi
            done
        fi
        
        ;;
        ld64)
        ldPath=$(which ld64.lld)
        clangLinkerArgs+=("-Wl,-sdk_version,10.9")
        #if [ $nostdlib -gt 0 ]; then
        #  clangLinkerArgs+=("-Wl,-undefined,dynamic_lookup")
        #fi
        
        if [ -n "$sdkroot" ]; then
            clangLinkerArgs+=("-Wl,-Z,-syslibroot,$sdkroot")
            
            for path in ${target_library_path[@]}; do
                if [ -d "$sdkroot/$path" ]; then
                    clangLinkerArgs+=("-Wl,-L$path")
                fi
            done
            for path in ${target_framework_path[@]}; do
                if [ -d "$sdkroot/$path" ]; then
                    clangLinkerArgs+=("-Wl,-F$path")
                fi
            done
        fi
        ;;
        "")
            # No linker specified
            if [ $gccMode -eq 1 ]; then
                # OK
                true
            else
                echo "Warning: No target linker specified, trying default" >&2
            fi

            if [ $isShared -gt 0 ]; then
                if [[ $hasShared -eq 0 ]]; then
                    clangLinkerArgs+=("-shared")
                fi
            fi

        ;;
        *)
        echo "Warning: Unknown target linker: $target_linker" >&2
        ;; 
    esac
    
    if [[ -n "$target_linker_binary" ]]; then
      ldPath=$(which "$target_linker_binary")
    fi
    
    if [[ $gccMode -eq 1 ]]; then
        # ignore -fuse-ld
        true
    else
        if [[ -n "$ldPath" && -f "$ldPath" ]]; then
            if [ "$useLdShim" -eq 1 ]; then
                ldPath="$currentDir/ldshim"
            fi
            clangLinkerArgs+=("-fuse-ld=$ldPath")
        fi
    fi
fi


if [[ "$triple" == *"-w64-"* ]]; then
    clangArgsNew=()
    for arg in ${clangArgs[@]}; do
        case "$arg" in
            -fpic|-fPIC|-fpie|-fPIE)
                # just ignore these
                continue
                ;;
        esac
        clangArgsNew+=("$arg")
    done
    clangArgs=(${clangArgsNew[@]})
fi
if [[ $gccMode -eq 1 ]]; then
    clangArgsNew=()
    for arg in ${clangArgs[@]}; do
        case "$arg" in
            -bundle)
                # just ignore these
                continue
                ;;
        esac
        clangArgsNew+=("$arg")
    done
    clangArgs=(${clangArgsNew[@]})
fi


compilerBinary="$(which $compiler)"
if [ -z "$compilerBinary" ]; then
  echo "Cannot compile -- compiler not found: $compiler" >&2
  exit 1
fi

# set -x
if [[ $withAndWithoutLC -eq 1 ]]; then
  nodepsOut="${outputFile%.*}.nodeps.${outputFile##*.}"
  "$compilerBinary" ${isystem_decls[@]} ${clangLinkerArgs[@]} -lc ${output_args[@]} ${clangArgs[@]} ${libsArgs[@]} && \
  "$compilerBinary" ${isystem_decls[@]} ${clangLinkerArgs[@]} -nostdlib -o "$nodepsOut" ${clangArgs[@]} ${libsArgs[@]}
else
  exec "$compilerBinary" ${isystem_decls[@]} ${clangLinkerArgs[@]} ${output_args[@]} ${clangArgs[@]} ${libsArgs[@]}
fi
