## junixsocket-native compiler configuration
## see this project's pom for custom properties that can be reused here

# NOTE: nar-maven-plugin hardcodes "gcc", even if you specify "clang" here (GccLinker#getLinker(LinkType))
x86_64.MacOSX.clang.linker.name=clang
x86_64.MacOSX.clang.linker.options=-target ${junixsocket.native.llvm.target}
x86_64.MacOSX.clang.c.compiler=clang
x86_64.MacOSX.clang.c.defines=
x86_64.MacOSX.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
x86_64.MacOSX.clang.c.includes=${junixsocket.native.default.c.includes}
x86_64.MacOSX.clang.c.excludes=
x86_64.MacOSX.clang.java.include=
x86_64.MacOSX.clang.java.runtimeDirectory=IGNORED
x86_64.MacOSX.clang.lib.prefix=lib
x86_64.MacOSX.clang.shared.prefix=lib
x86_64.MacOSX.clang.static.extension=a
x86_64.MacOSX.clang.shared.extension=dylib
x86_64.MacOSX.clang.plugin.extension=bundle
# NOTE: jnilib is also hardcoded in nar-maven-plugin's GccLinker#getLinker(LinkType)
x86_64.MacOSX.clang.jni.extension=jnilib
x86_64.MacOSX.clang.executable.extension=
x86_64.MacOSX.clang.cpp.compiler=clang++
x86_64.MacOSX.clang.cpp.defines=
x86_64.MacOSX.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
x86_64.MacOSX.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
x86_64.MacOSX.clang.cpp.excludes=

amd64.Linux.clang.linker.name=clang
amd64.Linux.clang.linker.options=-Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.c.compiler=clang
amd64.Linux.clang.c.defines=_GNU_SOURCE
amd64.Linux.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.Linux.clang.c.excludes=
amd64.Linux.clang.java.include=
amd64.Linux.clang.java.runtimeDirectory=IGNORED
amd64.Linux.clang.lib.prefix=lib
amd64.Linux.clang.shared.prefix=lib
amd64.Linux.clang.static.extension=a
amd64.Linux.clang.shared.extension=so
amd64.Linux.clang.plugin.extension=so
amd64.Linux.clang.jni.extension=so
amd64.Linux.clang.executable.extension=
amd64.Linux.clang.cpp.compiler=clang++
amd64.Linux.clang.cpp.defines=_GNU_SOURCE
amd64.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.Linux.clang.cpp.excludes=

arm.Linux.clang.linker.name=clang
arm.Linux.clang.linker.options=-Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
arm.Linux.clang.c.compiler=clang
arm.Linux.clang.c.defines=_GNU_SOURCE
arm.Linux.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
arm.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
arm.Linux.clang.c.excludes=
arm.Linux.clang.java.include=
arm.Linux.clang.java.runtimeDirectory=IGNORED
arm.Linux.clang.lib.prefix=lib
arm.Linux.clang.shared.prefix=lib
arm.Linux.clang.static.extension=a
arm.Linux.clang.shared.extension=so
arm.Linux.clang.plugin.extension=so
arm.Linux.clang.jni.extension=so
arm.Linux.clang.executable.extension=
arm.Linux.clang.cpp.compiler=clang++
arm.Linux.clang.cpp.defines=_GNU_SOURCE
arm.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
arm.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
arm.Linux.clang.cpp.excludes=

aarch64.Linux.clang.linker.name=clang
aarch64.Linux.clang.linker.options=-Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
aarch64.Linux.clang.c.compiler=clang
aarch64.Linux.clang.c.defines=_GNU_SOURCE
aarch64.Linux.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
aarch64.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
aarch64.Linux.clang.c.excludes=
aarch64.Linux.clang.java.include=
aarch64.Linux.clang.java.runtimeDirectory=IGNORED
aarch64.Linux.clang.lib.prefix=lib
aarch64.Linux.clang.shared.prefix=lib
aarch64.Linux.clang.static.extension=a
aarch64.Linux.clang.shared.extension=so
aarch64.Linux.clang.plugin.extension=so
aarch64.Linux.clang.jni.extension=so
aarch64.Linux.clang.executable.extension=
aarch64.Linux.clang.cpp.compiler=clang++
aarch64.Linux.clang.cpp.defines=_GNU_SOURCE
aarch64.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
aarch64.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
aarch64.Linux.clang.cpp.excludes=

ppc64le.Linux.clang.linker.name=clang
ppc64le.Linux.clang.linker.options=-Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
ppc64le.Linux.clang.c.compiler=clang
ppc64le.Linux.clang.c.defines=_GNU_SOURCE
ppc64le.Linux.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
ppc64le.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
ppc64le.Linux.clang.c.excludes=
ppc64le.Linux.clang.java.include=
ppc64le.Linux.clang.java.runtimeDirectory=IGNORED
ppc64le.Linux.clang.lib.prefix=lib
ppc64le.Linux.clang.shared.prefix=lib
ppc64le.Linux.clang.static.extension=a
ppc64le.Linux.clang.shared.extension=so
ppc64le.Linux.clang.plugin.extension=so
ppc64le.Linux.clang.jni.extension=so
ppc64le.Linux.clang.executable.extension=
ppc64le.Linux.clang.cpp.compiler=clang++
ppc64le.Linux.clang.cpp.defines=_GNU_SOURCE
ppc64le.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
ppc64le.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
ppc64le.Linux.clang.cpp.excludes=

s390x.Linux.clang.linker.name=clang
s390x.Linux.clang.linker.options=-Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
s390x.Linux.clang.c.compiler=clang
s390x.Linux.clang.c.defines=_GNU_SOURCE
s390x.Linux.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
s390x.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
s390x.Linux.clang.c.excludes=
s390x.Linux.clang.java.include=
s390x.Linux.clang.java.runtimeDirectory=IGNORED
s390x.Linux.clang.lib.prefix=lib
s390x.Linux.clang.shared.prefix=lib
s390x.Linux.clang.static.extension=a
s390x.Linux.clang.shared.extension=so
s390x.Linux.clang.plugin.extension=so
s390x.Linux.clang.jni.extension=so
s390x.Linux.clang.executable.extension=
s390x.Linux.clang.cpp.compiler=clang++
s390x.Linux.clang.cpp.defines=_GNU_SOURCE
s390x.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
s390x.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
s390x.Linux.clang.cpp.excludes=

riscv64.Linux.clang.linker.name=clang
riscv64.Linux.clang.linker.options=-Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
riscv64.Linux.clang.c.compiler=clang
riscv64.Linux.clang.c.defines=_GNU_SOURCE
riscv64.Linux.clang.c.options=-march=rv64ifd -mabi=lp64d ${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
riscv64.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
riscv64.Linux.clang.c.excludes=
riscv64.Linux.clang.java.include=
riscv64.Linux.clang.java.runtimeDirectory=IGNORED
riscv64.Linux.clang.lib.prefix=lib
riscv64.Linux.clang.shared.prefix=lib
riscv64.Linux.clang.static.extension=a
riscv64.Linux.clang.shared.extension=so
riscv64.Linux.clang.plugin.extension=so
riscv64.Linux.clang.jni.extension=so
riscv64.Linux.clang.executable.extension=
riscv64.Linux.clang.cpp.compiler=clang++
riscv64.Linux.clang.cpp.defines=_GNU_SOURCE
riscv64.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
riscv64.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
riscv64.Linux.clang.cpp.excludes=

amd64.Windows10.clang.linker.name=clang
amd64.Windows10.clang.linker.options=-target unspecified -Xcrossclang-use-gcc=x86_64-w64-mingw32-gcc -lWs2_32 -lAdvApi32 -lMswsock -Xcrossclang-output-strip-lib-prefix
#amd64.Windows10.clang.linker.options=-target ${junixsocket.native.llvm.target} -Xcrossclang-use-ldshim -Wl,--Xldshim-ld=x86_64-w64-mingw32-ld
amd64.Windows10.clang.c.compiler=clang
amd64.Windows10.clang.c.defines=
amd64.Windows10.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target unspecified -Xcrossclang-use-gcc=x86_64-w64-mingw32-gcc -lWs2_32 -lAdvApi32 -lMswsock
amd64.Windows10.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.Windows10.clang.c.excludes=
amd64.Windows10.clang.java.include=
amd64.Windows10.clang.java.runtimeDirectory=IGNORED
amd64.Windows10.clang.lib.prefix=lib
amd64.Windows10.clang.shared.prefix=lib
amd64.Windows10.clang.static.extension=a
amd64.Windows10.clang.shared.extension=dll
amd64.Windows10.clang.plugin.extension=bundle
# NOTE: jnilib is also hardcoded in nar-maven-plugin's GccLinker#getLinker(LinkType)
amd64.Windows10.clang.jni.extension=dll
amd64.Windows10.clang.executable.extension=
amd64.Windows10.clang.cpp.compiler=clang++
amd64.Windows10.clang.cpp.defines=
amd64.Windows10.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.Windows10.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.Windows10.clang.cpp.excludes=

amd64.SunOS.clang.linker.name=clang
amd64.SunOS.clang.linker.options=-m64 -nostdlib -target ${junixsocket.native.llvm.target}
amd64.SunOS.clang.c.compiler=clang
amd64.SunOS.clang.c.defines=_GNU_SOURCE
amd64.SunOS.clang.c.options=-m64 ${junixsocket.native.clang.c.options} -Wno-unused-function -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.SunOS.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.SunOS.clang.c.excludes=
amd64.SunOS.clang.java.include=
amd64.SunOS.clang.java.runtimeDirectory=IGNORED
amd64.SunOS.clang.lib.prefix=lib
amd64.SunOS.clang.shared.prefix=lib
amd64.SunOS.clang.static.extension=a
amd64.SunOS.clang.shared.extension=so
amd64.SunOS.clang.plugin.extension=so
amd64.SunOS.clang.jni.extension=so
amd64.SunOS.clang.executable.extension=
amd64.SunOS.clang.cpp.compiler=clang++
amd64.SunOS.clang.cpp.defines=_GNU_SOURCE
amd64.SunOS.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.SunOS.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.SunOS.clang.cpp.excludes=

amd64.FreeBSD.clang.linker.name=clang
amd64.FreeBSD.clang.linker.options=-Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
amd64.FreeBSD.clang.c.compiler=clang
amd64.FreeBSD.clang.c.defines=_GNU_SOURCE
amd64.FreeBSD.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.FreeBSD.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.FreeBSD.clang.c.excludes=
amd64.FreeBSD.clang.java.include=
amd64.FreeBSD.clang.java.runtimeDirectory=IGNORED
amd64.FreeBSD.clang.lib.prefix=lib
amd64.FreeBSD.clang.shared.prefix=lib
amd64.FreeBSD.clang.static.extension=a
amd64.FreeBSD.clang.shared.extension=so
amd64.FreeBSD.clang.plugin.extension=so
amd64.FreeBSD.clang.jni.extension=so
amd64.FreeBSD.clang.executable.extension=
amd64.FreeBSD.clang.cpp.compiler=clang++
amd64.FreeBSD.clang.cpp.defines=_GNU_SOURCE
amd64.FreeBSD.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.FreeBSD.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.FreeBSD.clang.cpp.excludes=
